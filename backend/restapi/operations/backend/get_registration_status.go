// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetRegistrationStatusHandlerFunc turns a function with the right signature into a get registration status handler
type GetRegistrationStatusHandlerFunc func(GetRegistrationStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRegistrationStatusHandlerFunc) Handle(params GetRegistrationStatusParams) middleware.Responder {
	return fn(params)
}

// GetRegistrationStatusHandler interface for that can handle valid get registration status params
type GetRegistrationStatusHandler interface {
	Handle(GetRegistrationStatusParams) middleware.Responder
}

// NewGetRegistrationStatus creates a new http.Handler for the get registration status operation
func NewGetRegistrationStatus(ctx *middleware.Context, handler GetRegistrationStatusHandler) *GetRegistrationStatus {
	return &GetRegistrationStatus{Context: ctx, Handler: handler}
}

/*
	GetRegistrationStatus swagger:route GET /namespaces/{namespace}/devices/{device-id}/registration backend getRegistrationStatus

Returns a device registration status, which can be registered, unregistered or unknown.
*/
type GetRegistrationStatus struct {
	Context *middleware.Context
	Handler GetRegistrationStatusHandler
}

func (o *GetRegistrationStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRegistrationStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
