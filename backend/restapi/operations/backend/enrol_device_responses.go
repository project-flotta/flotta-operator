// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/project-flotta/flotta-operator/backend/models"
)

// EnrolDeviceOKCode is the HTTP code returned for type EnrolDeviceOK
const EnrolDeviceOKCode int = 200

/*
EnrolDeviceOK OK

swagger:response enrolDeviceOK
*/
type EnrolDeviceOK struct {
}

// NewEnrolDeviceOK creates EnrolDeviceOK with default headers values
func NewEnrolDeviceOK() *EnrolDeviceOK {

	return &EnrolDeviceOK{}
}

// WriteResponse to the client
func (o *EnrolDeviceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// EnrolDeviceCreatedCode is the HTTP code returned for type EnrolDeviceCreated
const EnrolDeviceCreatedCode int = 201

/*
EnrolDeviceCreated Created

swagger:response enrolDeviceCreated
*/
type EnrolDeviceCreated struct {
}

// NewEnrolDeviceCreated creates EnrolDeviceCreated with default headers values
func NewEnrolDeviceCreated() *EnrolDeviceCreated {

	return &EnrolDeviceCreated{}
}

// WriteResponse to the client
func (o *EnrolDeviceCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// EnrolDeviceUnauthorizedCode is the HTTP code returned for type EnrolDeviceUnauthorized
const EnrolDeviceUnauthorizedCode int = 401

/*
EnrolDeviceUnauthorized Unauthorized

swagger:response enrolDeviceUnauthorized
*/
type EnrolDeviceUnauthorized struct {
}

// NewEnrolDeviceUnauthorized creates EnrolDeviceUnauthorized with default headers values
func NewEnrolDeviceUnauthorized() *EnrolDeviceUnauthorized {

	return &EnrolDeviceUnauthorized{}
}

// WriteResponse to the client
func (o *EnrolDeviceUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// EnrolDeviceForbiddenCode is the HTTP code returned for type EnrolDeviceForbidden
const EnrolDeviceForbiddenCode int = 403

/*
EnrolDeviceForbidden Forbidden

swagger:response enrolDeviceForbidden
*/
type EnrolDeviceForbidden struct {
}

// NewEnrolDeviceForbidden creates EnrolDeviceForbidden with default headers values
func NewEnrolDeviceForbidden() *EnrolDeviceForbidden {

	return &EnrolDeviceForbidden{}
}

// WriteResponse to the client
func (o *EnrolDeviceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

/*
EnrolDeviceDefault Error

swagger:response enrolDeviceDefault
*/
type EnrolDeviceDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEnrolDeviceDefault creates EnrolDeviceDefault with default headers values
func NewEnrolDeviceDefault(code int) *EnrolDeviceDefault {
	if code <= 0 {
		code = 500
	}

	return &EnrolDeviceDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the enrol device default response
func (o *EnrolDeviceDefault) WithStatusCode(code int) *EnrolDeviceDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the enrol device default response
func (o *EnrolDeviceDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the enrol device default response
func (o *EnrolDeviceDefault) WithPayload(payload *models.Error) *EnrolDeviceDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the enrol device default response
func (o *EnrolDeviceDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EnrolDeviceDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
