// Code generated by mockery v1.0.0. DO NOT EDIT.

package backend

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

// EnrolDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) EnrolDevice(ctx context.Context, params *EnrolDeviceParams) (*EnrolDeviceOK, *EnrolDeviceCreated, error) {
	ret := _m.Called(ctx, params)

	var r0 *EnrolDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *EnrolDeviceParams) *EnrolDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EnrolDeviceOK)
		}
	}

	var r1 *EnrolDeviceCreated
	if rf, ok := ret.Get(1).(func(context.Context, *EnrolDeviceParams) *EnrolDeviceCreated); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*EnrolDeviceCreated)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *EnrolDeviceParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDeviceConfiguration provides a mock function with given fields: ctx, params
func (_m *MockAPI) GetDeviceConfiguration(ctx context.Context, params *GetDeviceConfigurationParams) (*GetDeviceConfigurationOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *GetDeviceConfigurationOK
	if rf, ok := ret.Get(0).(func(context.Context, *GetDeviceConfigurationParams) *GetDeviceConfigurationOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetDeviceConfigurationOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetDeviceConfigurationParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlaybookExecutions provides a mock function with given fields: ctx, params
func (_m *MockAPI) GetPlaybookExecutions(ctx context.Context, params *GetPlaybookExecutionsParams) (*GetPlaybookExecutionsOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *GetPlaybookExecutionsOK
	if rf, ok := ret.Get(0).(func(context.Context, *GetPlaybookExecutionsParams) *GetPlaybookExecutionsOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetPlaybookExecutionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetPlaybookExecutionsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistrationStatus provides a mock function with given fields: ctx, params
func (_m *MockAPI) GetRegistrationStatus(ctx context.Context, params *GetRegistrationStatusParams) (*GetRegistrationStatusOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *GetRegistrationStatusOK
	if rf, ok := ret.Get(0).(func(context.Context, *GetRegistrationStatusParams) *GetRegistrationStatusOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetRegistrationStatusOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetRegistrationStatusParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) RegisterDevice(ctx context.Context, params *RegisterDeviceParams) (*RegisterDeviceOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *RegisterDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterDeviceParams) *RegisterDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterDeviceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterDeviceParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHeartBeat provides a mock function with given fields: ctx, params
func (_m *MockAPI) UpdateHeartBeat(ctx context.Context, params *UpdateHeartBeatParams) (*UpdateHeartBeatOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *UpdateHeartBeatOK
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateHeartBeatParams) *UpdateHeartBeatOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateHeartBeatOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateHeartBeatParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
