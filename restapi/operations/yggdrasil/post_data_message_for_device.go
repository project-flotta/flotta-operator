// Code generated by go-swagger; DO NOT EDIT.

package yggdrasil

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostDataMessageForDeviceHandlerFunc turns a function with the right signature into a post data message for device handler
type PostDataMessageForDeviceHandlerFunc func(PostDataMessageForDeviceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDataMessageForDeviceHandlerFunc) Handle(params PostDataMessageForDeviceParams) middleware.Responder {
	return fn(params)
}

// PostDataMessageForDeviceHandler interface for that can handle valid post data message for device params
type PostDataMessageForDeviceHandler interface {
	Handle(PostDataMessageForDeviceParams) middleware.Responder
}

// NewPostDataMessageForDevice creates a new http.Handler for the post data message for device operation
func NewPostDataMessageForDevice(ctx *middleware.Context, handler PostDataMessageForDeviceHandler) *PostDataMessageForDevice {
	return &PostDataMessageForDevice{Context: ctx, Handler: handler}
}

/* PostDataMessageForDevice swagger:route POST /data/{device_id}/out yggdrasil postDataMessageForDevice

Post data message for device API

*/
type PostDataMessageForDevice struct {
	Context *middleware.Context
	Handler PostDataMessageForDeviceHandler
}

func (o *PostDataMessageForDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDataMessageForDeviceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
