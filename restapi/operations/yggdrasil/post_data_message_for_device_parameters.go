// Code generated by go-swagger; DO NOT EDIT.

package yggdrasil

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/project-flotta/flotta-operator/models"
)

// NewPostDataMessageForDeviceParams creates a new PostDataMessageForDeviceParams object
//
// There are no default values defined in the spec.
func NewPostDataMessageForDeviceParams() PostDataMessageForDeviceParams {

	return PostDataMessageForDeviceParams{}
}

// PostDataMessageForDeviceParams contains all the bound params for the post data message for device operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostDataMessageForDevice
type PostDataMessageForDeviceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Device ID
	  Required: true
	  In: path
	*/
	DeviceID string
	/*
	  Required: true
	  In: body
	*/
	Message *models.Message
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostDataMessageForDeviceParams() beforehand.
func (o *PostDataMessageForDeviceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rDeviceID, rhkDeviceID, _ := route.Params.GetOK("device_id")
	if err := o.bindDeviceID(rDeviceID, rhkDeviceID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Message
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("message", "body", ""))
			} else {
				res = append(res, errors.NewParseError("message", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Message = &body
			}
		}
	} else {
		res = append(res, errors.Required("message", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDeviceID binds and validates parameter DeviceID from path.
func (o *PostDataMessageForDeviceParams) bindDeviceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.DeviceID = raw

	return nil
}
