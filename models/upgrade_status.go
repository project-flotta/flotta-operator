// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradeStatus Upgrade status
//
// swagger:model upgrade-status
type UpgradeStatus struct {

	// current commit ID
	CurrentCommitID string `json:"current_commit_ID,omitempty"`

	// last upgrade status
	// Enum: [succeeded failed]
	LastUpgradeStatus string `json:"last_upgrade_status,omitempty"`

	// last upgrade time
	LastUpgradeTime string `json:"last_upgrade_time,omitempty"`
}

// Validate validates this upgrade status
func (m *UpgradeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpgradeStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradeStatusTypeLastUpgradeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["succeeded","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradeStatusTypeLastUpgradeStatusPropEnum = append(upgradeStatusTypeLastUpgradeStatusPropEnum, v)
	}
}

const (

	// UpgradeStatusLastUpgradeStatusSucceeded captures enum value "succeeded"
	UpgradeStatusLastUpgradeStatusSucceeded string = "succeeded"

	// UpgradeStatusLastUpgradeStatusFailed captures enum value "failed"
	UpgradeStatusLastUpgradeStatusFailed string = "failed"
)

// prop value enum
func (m *UpgradeStatus) validateLastUpgradeStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradeStatusTypeLastUpgradeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradeStatus) validateLastUpgradeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpgradeStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateLastUpgradeStatusEnum("last_upgrade_status", "body", m.LastUpgradeStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgrade status based on context it is used
func (m *UpgradeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeStatus) UnmarshalBinary(b []byte) error {
	var res UpgradeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
