// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metrics Metrics endpoint configuration
//
// swagger:model metrics
type Metrics struct {

	// allow list
	AllowList *MetricsAllowList `json:"allow_list,omitempty"`

	// containers
	Containers map[string]ContainerMetrics `json:"containers,omitempty"`

	// Interval(in seconds) to scrape metrics endpoint.
	Interval int32 `json:"interval,omitempty"`

	// Path to use when retrieving metrics
	Path string `json:"path,omitempty"`

	// port
	Port int32 `json:"port,omitempty"`
}

// Validate validates this metrics
func (m *Metrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metrics) validateAllowList(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowList) { // not required
		return nil
	}

	if m.AllowList != nil {
		if err := m.AllowList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allow_list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allow_list")
			}
			return err
		}
	}

	return nil
}

func (m *Metrics) validateContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	for k := range m.Containers {

		if err := validate.Required("containers"+"."+k, "body", m.Containers[k]); err != nil {
			return err
		}
		if val, ok := m.Containers[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containers" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("containers" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this metrics based on the context it is used
func (m *Metrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metrics) contextValidateAllowList(ctx context.Context, formats strfmt.Registry) error {

	if m.AllowList != nil {
		if err := m.AllowList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allow_list")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allow_list")
			}
			return err
		}
	}

	return nil
}

func (m *Metrics) contextValidateContainers(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Containers {

		if val, ok := m.Containers[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metrics) UnmarshalBinary(b []byte) error {
	var res Metrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
