// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Message message
//
// swagger:model message
type Message struct {

	// Content
	Content interface{} `json:"content,omitempty"`

	// directive
	Directive string `json:"directive,omitempty"`

	// message id
	MessageID string `json:"message_id,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// response to
	ResponseTo string `json:"response_to,omitempty"`

	// sent
	// Format: date-time
	Sent strfmt.DateTime `json:"sent,omitempty"`

	// type
	// Enum: [connection-status command event data]
	Type string `json:"type,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this message
func (m *Message) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Message) validateSent(formats strfmt.Registry) error {
	if swag.IsZero(m.Sent) { // not required
		return nil
	}

	if err := validate.FormatOf("sent", "body", "date-time", m.Sent.String(), formats); err != nil {
		return err
	}

	return nil
}

var messageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connection-status","command","event","data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeTypePropEnum = append(messageTypeTypePropEnum, v)
	}
}

const (

	// MessageTypeConnectionDashStatus captures enum value "connection-status"
	MessageTypeConnectionDashStatus string = "connection-status"

	// MessageTypeCommand captures enum value "command"
	MessageTypeCommand string = "command"

	// MessageTypeEvent captures enum value "event"
	MessageTypeEvent string = "event"

	// MessageTypeData captures enum value "data"
	MessageTypeData string = "data"
)

// prop value enum
func (m *Message) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this message based on context it is used
func (m *Message) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Message) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Message) UnmarshalBinary(b []byte) error {
	var res Message
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
