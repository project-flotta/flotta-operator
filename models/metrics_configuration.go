// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetricsConfiguration Defines metrics configuration for the device
//
// swagger:model metrics-configuration
type MetricsConfiguration struct {

	// receiver
	Receiver *MetricsReceiverConfiguration `json:"receiver,omitempty"`

	// retention
	Retention *MetricsRetention `json:"retention,omitempty"`

	// system
	System *SystemMetricsConfiguration `json:"system,omitempty"`
}

// Validate validates this metrics configuration
func (m *MetricsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReceiver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricsConfiguration) validateReceiver(formats strfmt.Registry) error {
	if swag.IsZero(m.Receiver) { // not required
		return nil
	}

	if m.Receiver != nil {
		if err := m.Receiver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsConfiguration) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsConfiguration) validateSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metrics configuration based on the context it is used
func (m *MetricsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceiver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricsConfiguration) contextValidateReceiver(ctx context.Context, formats strfmt.Registry) error {

	if m.Receiver != nil {
		if err := m.Receiver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receiver")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receiver")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsConfiguration) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {
		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *MetricsConfiguration) contextValidateSystem(ctx context.Context, formats strfmt.Registry) error {

	if m.System != nil {
		if err := m.System.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricsConfiguration) UnmarshalBinary(b []byte) error {
	var res MetricsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
