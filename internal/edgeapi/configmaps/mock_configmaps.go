// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-operator/internal/edgeapi/configmaps (interfaces: ConfigMap)

// Package configmaps is a generated GoMock package.
package configmaps

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/project-flotta/flotta-operator/api/v1alpha1"
	models "github.com/project-flotta/flotta-operator/models"
)

// MockConfigMap is a mock of ConfigMap interface.
type MockConfigMap struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapMockRecorder
}

// MockConfigMapMockRecorder is the mock recorder for MockConfigMap.
type MockConfigMapMockRecorder struct {
	mock *MockConfigMap
}

// NewMockConfigMap creates a new mock instance.
func NewMockConfigMap(ctrl *gomock.Controller) *MockConfigMap {
	mock := &MockConfigMap{ctrl: ctrl}
	mock.recorder = &MockConfigMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMap) EXPECT() *MockConfigMapMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockConfigMap) Fetch(arg0 context.Context, arg1 v1alpha1.EdgeWorkload, arg2 string) (models.ConfigmapList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.ConfigmapList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockConfigMapMockRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConfigMap)(nil).Fetch), arg0, arg1, arg2)
}
