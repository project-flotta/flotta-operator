// Code generated by mockery v1.0.0. DO NOT EDIT.

package yggdrasil

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockAPI is an autogenerated mock type for the API type
type MockAPI struct {
	mock.Mock
}

// GetControlMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) GetControlMessageForDevice(ctx context.Context, params *GetControlMessageForDeviceParams) (*GetControlMessageForDeviceOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *GetControlMessageForDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *GetControlMessageForDeviceParams) *GetControlMessageForDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetControlMessageForDeviceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetControlMessageForDeviceParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) GetDataMessageForDevice(ctx context.Context, params *GetDataMessageForDeviceParams) (*GetDataMessageForDeviceOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *GetDataMessageForDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *GetDataMessageForDeviceParams) *GetDataMessageForDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetDataMessageForDeviceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetDataMessageForDeviceParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostControlMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) PostControlMessageForDevice(ctx context.Context, params *PostControlMessageForDeviceParams) (*PostControlMessageForDeviceOK, error) {
	ret := _m.Called(ctx, params)

	var r0 *PostControlMessageForDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *PostControlMessageForDeviceParams) *PostControlMessageForDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostControlMessageForDeviceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PostControlMessageForDeviceParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostDataMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockAPI) PostDataMessageForDevice(ctx context.Context, params *PostDataMessageForDeviceParams) (*PostDataMessageForDeviceOK, *PostDataMessageForDeviceAlreadyReported, error) {
	ret := _m.Called(ctx, params)

	var r0 *PostDataMessageForDeviceOK
	if rf, ok := ret.Get(0).(func(context.Context, *PostDataMessageForDeviceParams) *PostDataMessageForDeviceOK); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostDataMessageForDeviceOK)
		}
	}

	var r1 *PostDataMessageForDeviceAlreadyReported
	if rf, ok := ret.Get(1).(func(context.Context, *PostDataMessageForDeviceParams) *PostDataMessageForDeviceAlreadyReported); ok {
		r1 = rf(ctx, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*PostDataMessageForDeviceAlreadyReported)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *PostDataMessageForDeviceParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
